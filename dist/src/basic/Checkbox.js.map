{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","checkStyle","borderColor","props","color","checkboxBgColor","backgroundColor","checked","defaultProps","style","getInitialStyle","variables","context","theme","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","contextTypes","PropTypes","object","propTypes","bool","StyledCheckBox"],"mappings":"kzBAAA,4B;AACA;AACA,4D;AACA;AACA,mE;AACA,qD;AACA,8B;AACA,mD;;;AAGMA,Q;;;;;AAKc;AAChB,MAAO;AACLC,WAAY;AACVC,YAAa,KAAKC,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsC,mBAASC,eADlD;AAEVC,gBAAkB,KAAKH,KAAL,CAAWI,OAAX,GAAuB,IAAxB,CAAiC,KAAKJ,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsC,mBAASC,eAAhF,CAAmG,aAF1G,CADP,CAAP;;;AAMD,C;;AAEkB;AACjB,GAAMG,cAAe;AACnBC,MAAO,KAAKC,eAAL,GAAuBT,UADX,CAArB;;;AAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBK,YAAzB,CAAP;AACD,C;AACQ;AACP,GAAMG,WAAa,KAAKC,OAAL,CAAaC,KAAd,CAAuB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAxE,mBAAlB;AACA,GAAMG,eAAgBH,UAAUG,aAAhC;AACA,GAAMC,UAAWJ,UAAUI,QAA3B;AACA;AACE,sEAAkB,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EAAvB,EAAgD,KAAKC,gBAAL,EAAhD;AACE,kDAAQ,MAAO;AACXd,MAAOO,UAAUQ,iBADN;AAEXC,SAAUT,UAAUU,gBAFT;AAGXC,WAAYX,UAAUY,gBAHX,CAAf;AAIK,KAAQR,WAAa,KAAd,EAAyBD,gBAAkB,UAA5C,CAA2D,uBAA3D,CAAqF,cAJhG,EADF,CADF;;;AASD,C,wCAlCGd,Q,CACGwB,Y,CAAe,CACpBX,MAAO,gBAAMY,SAAN,CAAgBC,MADH,C;;;AAoCxB1B,SAAS2B,SAAT;AACK,8BAAiBA,SADtB;AAEElB,MAAO,gBAAMgB,SAAN,CAAgBC,MAFzB;AAGEnB,QAAS,gBAAMkB,SAAN,CAAgBG,IAH3B;;;AAMA,GAAMC,gBAAiB,wBAAa,qBAAb,CAAoC,EAApC,iCAA8D7B,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlB6B,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TouchableOpacity, Platform } from 'react-native';\r\nimport IconNB from 'react-native-vector-icons/Ionicons';\r\nimport { connectStyle } from '@shoutem/theme';\r\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\r\nimport variable from '../theme/variables/platform';\r\nimport _ from 'lodash';\r\nimport computeProps from '../Utils/computeProps';\r\n\r\n\r\nclass CheckBox extends Component {\r\n  static contextTypes = {\r\n    theme: React.PropTypes.object,\r\n  }\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      checkStyle: {\r\n        borderColor: this.props.color ? this.props.color : variable.checkboxBgColor,\r\n        backgroundColor: (this.props.checked === true) ? (this.props.color ? this.props.color : variable.checkboxBgColor) : 'transparent',\r\n      },\r\n    };\r\n  }\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().checkStyle,\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const variables = (this.context.theme) ? this.context.theme['@@shoutem.theme/themeStyle'].variables : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    const platform = variables.platform;\r\n    return (\r\n      <TouchableOpacity ref={c => this._root = c} {...this.prepareRootProps()}>\r\n        <IconNB style={{\r\n            color: variables.checkboxTickColor,\r\n            fontSize: variables.CheckboxFontSize,\r\n            lineHeight: variables.CheckboxIconSize\r\n          }} name={((platform === 'ios') && (platformStyle !== 'material')) ? 'ios-checkmark-outline' : 'md-checkmark'} />\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: React.PropTypes.object,\r\n  checked: React.PropTypes.bool,\r\n};\r\n\r\nconst StyledCheckBox = connectStyle('NativeBase.CheckBox', {}, mapPropsToStyleNames)(CheckBox);\r\n\r\nexport {\r\n  StyledCheckBox as CheckBox,\r\n};\r\n"]}