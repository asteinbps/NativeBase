{"version":3,"sources":["../../../src/basic/ToastContainer.js"],"names":["ToastContainer","props","state","modalVisible","config","setState","text","buttonText","type","position","duration","setTimeout","autoHide","console","warn","margin","OS","flex","justifyContent","toastInstance","_root","showToast","propTypes","style","PropTypes","object","StyledToastContainer"],"mappings":";;;AAGA,4B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mE;;;AAGMA,c;AACJ,wBAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,MAAKC,KAAL,CAAa;AACXC,aAAc,KADH,CAAb,CAFiB;;AAKlB,C;;;;;AAKmB,oBAATC,OAAS,MAATA,MAAS;AAClB,KAAKC,QAAL,CAAc;AACZF,aAAc,IADF;AAEZG,KAAMF,OAAOE,IAFD;AAGZC,WAAYH,OAAOG,UAHP;AAIZC,KAAMJ,OAAOI,IAJD;AAKZC,SAAUL,OAAOK,QALL,CAAd;;AAOA,GAAIL,OAAOM,QAAP,CAAgB,CAApB,CAAuB;AACrBC,WAAW,UAAK;AACd,OAAKN,QAAL,CAAc;AACZF,aAAc,KADF,CAAd;;AAGD,CAJD,CAIGC,OAAOM,QAJV;AAKD;AACF,C;AACmB;AAClB,GAAI,CAAC,KAAKT,KAAL,CAAWW,QAAZ,EAAwB,KAAKX,KAAL,CAAWS,QAAvC,CAAiD;AAC/CG,QAAQC,IAAR;AACD;AACF,C;AACQ;AACP;AACE;AACE,cAAgB,KAAKZ,KAAL,CAAWO,QAAX,EAAqB,QAAtB,CAAkC,OAAlC,CAA4C,MAD7D;AAEE,YAAa,IAFf;AAGE,QAAS,KAAKP,KAAL,CAAWC,YAHtB;AAIE,eAAgB,yBAAM;AACpB,OAAKE,QAAL,CAAc;AACZF,aAAc,KADF,CAAd;;AAGD,CARH;;AAUE,iDAAM,MAAO;AACTY,OAAS,sBAASC,EAAT,GAAc,KAAf,CAAwB,EAAxB,CAA6B,CAD5B;AAETC,KAAM,CAFG;AAGTC,eAAiB,KAAKhB,KAAL,CAAWO,QAAX,GAAsB,KAAvB,CAAgC,YAAhC,CAAgD,KAAKP,KAAL,CAAWO,QAAX,GAAsB,QAAvB,CAAmC,UAAnC,CAAiD,KAAKP,KAAL,CAAWO,QAAX,GAAsB,QAAvB,CAAmC,QAAnC,CAA8C,YAHpJ,CAAb;AAIE;AACE,OAAS,KAAKP,KAAL,CAAWM,IAAX,EAAmB,QAApB,CAAgC,IAAhC,CAAuC,KADjD;AAEE,QAAU,KAAKN,KAAL,CAAWM,IAAX,EAAmB,SAApB,CAAiC,IAAjC,CAAwC,KAFnD;AAGE,QAAU,KAAKN,KAAL,CAAWM,IAAX,EAAmB,SAApB,CAAiC,IAAjC,CAAwC,KAHnD;AAIE,8CAAO,KAAKN,KAAL,CAAWI,IAAlB,CAJF;AAKI,KAAKJ,KAAL,CAAWK,UAAZ,EAA2B,8CAAQ,QAAS,kBAAM;AAC/C,OAAKF,QAAL,CAAc;AACZF,aAAc,KADF,CAAd;;AAGD,CAJyB;AAK1B,8CAAO,KAAKD,KAAL,CAAWK,UAAlB,CAL0B,CAL9B,CAJF,CAVF,CADF;;;;;;;AAgCD,C,0CAzDwB,IAATH,OAAS,oCACvB,KAAKe,aAAL,CAAmBC,KAAnB,CAAyBC,SAAzB,CAAmC,CAACjB,aAAD,CAAnC,EACD,C;;;AA0DHJ,eAAesB,SAAf;AACK,kBAAKA,SADV;AAEEC,MAAO,gBAAMC,SAAN,CAAgBC,MAFzB;;;AAKA,GAAMC,sBAAuB,wBAAa,2BAAb,CAA0C,EAA1C,iCAAoE1B,cAApE,CAA7B,C;;;AAG0BA,c,CAAxB0B,oB","file":"ToastContainer.js","sourcesContent":["/* @flow */\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { View, Modal, Platform } from 'react-native';\r\nimport { connectStyle } from '@shoutem/theme';\r\nimport { Text } from './Text';\r\nimport { Button } from './Button';\r\nimport { ViewNB } from './View';\r\nimport { Toast } from './Toast';\r\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\r\n\r\n\r\nclass ToastContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false\r\n    }\r\n  }\r\n  static toastInstance;\r\n  static show({...config}) {\r\n    this.toastInstance._root.showToast({config});\r\n  }\r\n  showToast({config}) {\r\n    this.setState({\r\n      modalVisible: true,\r\n      text: config.text,\r\n      buttonText: config.buttonText,\r\n      type: config.type,\r\n      position: config.position\r\n    });\r\n    if (config.duration>0) {\r\n      setTimeout(()=> {\r\n        this.setState({\r\n          modalVisible: false\r\n        });\r\n      }, config.duration);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (!this.props.autoHide && this.props.duration) {\r\n      console.warn(`It's not recommended to set autoHide false with duration`);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Modal\r\n        animationType={(this.state.position=='bottom') ? \"slide\" : \"fade\"}\r\n        transparent={true}\r\n        visible={this.state.modalVisible}\r\n        onRequestClose={() => {\r\n          this.setState({\r\n            modalVisible: false\r\n          });\r\n        }}\r\n        >\r\n        <View style={{\r\n            margin: (Platform.OS==='ios') ? 20 : 0,\r\n            flex: 1,\r\n            justifyContent: (this.state.position==='top') ? 'flex-start' : (this.state.position==='bottom') ? 'flex-end' : (this.state.position==='center') ? 'center' : 'flex-start'}}>\r\n          <Toast\r\n            danger={(this.state.type == 'danger') ? true : false}\r\n            success={(this.state.type == 'success') ? true : false}\r\n            warning={(this.state.type == 'warning') ? true : false}>\r\n            <Text>{this.state.text}</Text>\r\n            {(this.state.buttonText) && <Button onPress={() => {\r\n                this.setState({\r\n                  modalVisible: false\r\n                });\r\n              }}>\r\n              <Text>{this.state.buttonText}</Text>\r\n            </Button>}\r\n\r\n          </Toast>\r\n        </View>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nToastContainer.propTypes = {\r\n  ...View.propTypes,\r\n  style: React.PropTypes.object,\r\n};\r\n\r\nconst StyledToastContainer = connectStyle('NativeBase.ToastContainer', {}, mapPropsToStyleNames)(ToastContainer);\r\n\r\nexport {\r\n  StyledToastContainer as ToastContainer,\r\n};\r\n"]}