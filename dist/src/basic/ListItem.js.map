{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","children","androidRippleColor","Ripple","androidRippleColorDark","marginLeft","paddingLeft","contextTypes","PropTypes","object","propTypes","style","itemDivider","bool","button","StyledListItem"],"mappings":"kzBAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAIK;AACP,GAAMC,WAAa,KAAKC,OAAL,CAAaC,KAAd,CAAuB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAxE,mBAAlB;;AAEA,GAAI,sBAASG,EAAT,GAAgB,SAAhB,EAA6B,mBAASC,aAAT,GAA2B,KAAxD,EAAiE,CAAC,KAAKC,KAAL,CAAWC,OAA7E,EAAwF,CAAC,KAAKD,KAAL,CAAWE,WAApG,EAAmH,sBAASC,OAAT,EAAoB,EAA3I,CAA+I;AAC7I;AACE;AACE,QAAS,KAAKH,KAAL,CAAWC,OADtB;AAEE,YAAa,KAAKD,KAAL,CAAWE,WAF1B;AAGE,IAAK,sBAAK,QAAKE,KAAL,CAAaC,CAAlB,EAHP;AAIE,cAAeV,UAAUW,oBAJ3B;;AAME,gDAAU,KAAKN,KAAf,CAAuB,KAAKA,KAAL,CAAWO,QAAlC,CANF,CADF;;;AAUD,CAXD;AAYK;AACH;AACI,oEAAyB,IAAK,sBAAK,QAAKH,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKL,KAAL,CAAWC,OADxB;AAEI,YAAa,KAAKD,KAAL,CAAWE,WAF5B;AAGI,WAAa,KAAKF,KAAL,CAAWQ,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKT,KAAL,CAAWQ,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAHlH;AAII,iDAAM,MAAO,CAAEC,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACE,gDAAU,KAAKZ,KAAf,CAAuB,KAAKA,KAAL,CAAWO,QAAlC,CADF,CAJJ,CADJ;;;;AAUD;AACF,C,wCA/BGb,Q,CACGmB,Y,CAAe,CACpBhB,MAAO,gBAAMiB,SAAN,CAAgBC,MADH,C;;;AAiCxBrB,SAASsB,SAAT;AACK,gCAAmBA,SADxB;AAEEC,MAAO,gBAAMH,SAAN,CAAgBC,MAFzB;AAGEG,YAAa,gBAAMJ,SAAN,CAAgBK,IAH/B;AAIEC,OAAQ,gBAAMN,SAAN,CAAgBK,IAJ1B;;;AAOA,GAAME,gBAAiB,yCAAa,qBAAb,CAAoC,EAApC,iCAA8D3B,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlB2B,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { TouchableHighlight, Platform, TouchableNativeFeedback, View } from 'react-native';\r\n\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\r\nimport variable from '../theme/variables/platform';\r\n\r\nclass ListItem extends Component {\r\n  static contextTypes = {\r\n    theme: React.PropTypes.object,\r\n  }\r\n  render() {\r\n    const variables = (this.context.theme) ? this.context.theme['@@shoutem.theme/themeStyle'].variables : variable;\r\n\r\n    if (Platform.OS !== 'android' || variable.androidRipple === false || !this.props.onPress || !this.props.onLongPress || Platform.Version <= 21) {\r\n      return (\r\n        <TouchableHighlight\r\n          onPress={this.props.onPress}\r\n          onLongPress={this.props.onLongPress}\r\n          ref={c => this._root = c}\r\n          underlayColor={variables.listBtnUnderlayColor}\r\n        >\r\n          <View {...this.props}>{this.props.children}</View>\r\n        </TouchableHighlight>\r\n      );\r\n    }\r\n    else {\r\n      return(\r\n          <TouchableNativeFeedback ref={c => this._root = c}\r\n              onPress={this.props.onPress}\r\n              onLongPress={this.props.onLongPress}\r\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)}>\r\n              <View style={{ marginLeft: -17, paddingLeft: 17 }}>\r\n                <View {...this.props}>{this.props.children}</View>\r\n              </View>\r\n          </TouchableNativeFeedback>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nListItem.propTypes = {\r\n  ...TouchableHighlight.propTypes,\r\n  style: React.PropTypes.object,\r\n  itemDivider: React.PropTypes.bool,\r\n  button: React.PropTypes.bool,\r\n};\r\n\r\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\r\n\r\nexport {\r\n  StyledListItem as ListItem,\r\n};\r\n"]}