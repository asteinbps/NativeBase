{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","children","OS","Children","map","child","type","cloneElement","capitalize","androidRipple","prepareRootProps","_root","c","activeOpacity","onPress","androidRippleColor","Ripple","propTypes","PropTypes","object","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyledButton"],"mappings":";;;AAGA,4B;AACA;AACA;AACA,uD;AACA;AACA,mD;;AAEA,mE;;AAEMA,M;;AAEc;AAChB,MAAO;AACLC,YAAa;AACXC,YAAc,KAAKC,KAAL,CAAWC,QAAZ,CAAwB,CAAxB,CAA4BC,SAD9B;AAEXC,aAAe,KAAKH,KAAL,CAAWI,OAAX,EAAsB,KAAKJ,KAAL,CAAWC,QAAlC,CAA8C,mBAAUI,iBAAxD,CAA4E,CAF/E,CADR,CAAP;;;AAMD,C;;AAEkB;AACjB,GAAMC,cAAe;AACnBC,MAAO,KAAKC,eAAL,GAAuBV,WADX,CAArB;;;AAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBM,YAAzB,CAAP;AACD,C;AACQ;AACP,GAAMG,UAAW,sBAASC,EAAT,GAAgB,KAAhB;AACX,KAAKV,KAAL,CAAWS,QADA;AAEX,gBAAME,QAAN,CAAeC,GAAf,CAAmB,KAAKZ,KAAL,CAAWS,QAA9B,CAAwC,sBAASI,OAAMC,IAAN,cAAsB,gBAAMC,YAAN,CAAmBF,KAAnB,WAA4BG,WAAY,IAAxC,EAAiDH,MAAMb,KAAvD,EAAtB,CAAwFa,KAAjG,EAAxC,CAFN;AAGA,GAAI,sBAASH,EAAT,GAAc,SAAd,EAA2B,mBAAUO,aAAV,GAA0B,KAArD,EAA8D,sBAAS,SAAT,GAAuB,EAAzF,CAA6F;AAC3F;AACE;AACM,KAAKC,gBAAL,EADN;AAEE,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EAFP;AAGE,cAAgB,KAAKpB,KAAL,CAAWqB,aAAZ,CAA6B,KAAKrB,KAAL,CAAWqB,aAAxC,CAAwD,GAHzE;;AAKGZ,QALH,CADF;;;AASD,CAVD;AAWK;AACH;AACI,6EAAyB,IAAK,sBAAK,QAAKU,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKpB,KAAL,CAAWsB,OADxB;AAEI,WAAa,KAAKtB,KAAL,CAAWuB,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKxB,KAAL,CAAWuB,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAAUD,kBAAzC,CAFlH;AAGS,KAAKL,gBAAL,EAHT;AAII,gDAAU,KAAKA,gBAAL,EAAV;AACKT,QADL,CAJJ,CADJ;;;;AAUD;AACF,C;;;AAGHZ,OAAO4B,SAAP;AACK,8BAAiBA,SADtB;AAEElB,MAAO,gBAAMmB,SAAN,CAAgBC,MAFzB;AAGEC,MAAO,gBAAMF,SAAN,CAAgBG,IAHzB;AAIEC,QAAS,gBAAMJ,SAAN,CAAgBG,IAJ3B;AAKEE,YAAa,gBAAML,SAAN,CAAgBG,IAL/B;AAMEG,QAAS,gBAAMN,SAAN,CAAgBG,IAN3B;AAOEI,OAAQ,gBAAMP,SAAN,CAAgBG,IAP1B;AAQEK,QAAS,gBAAMR,SAAN,CAAgBG,IAR3B;AASEM,KAAM,gBAAMT,SAAN,CAAgBG,IATxB;AAUE5B,SAAU,gBAAMyB,SAAN,CAAgBG,IAV5B;AAWEb,WAAY,gBAAMU,SAAN,CAAgBG,IAX9B;AAYEO,SAAU,gBAAMV,SAAN,CAAgBG,IAZ5B;AAaEzB,QAAS,gBAAMsB,SAAN,CAAgBG,IAb3B;AAcEQ,MAAO,gBAAMX,SAAN,CAAgBG,IAdzB;AAeES,MAAO,gBAAMZ,SAAN,CAAgBG,IAfzB;AAgBEU,OAAQ,gBAAMb,SAAN,CAAgBG,IAhB1B;;;AAmBAhC,OAAOS,YAAP,CAAsB;AACpBU,WAAY,IADQ,CAAtB;;;AAIA,GAAMwB,cAAe,yCAAa,mBAAb,CAAkC,EAAlC,iCAA4D3C,MAA5D,CAArB,C;;AAEkBA,M,CAAhB2C,Y","file":"Button.js","sourcesContent":["/* @flow */\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from 'react-native';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport variables from './../theme/variables/platform';\r\nimport { Text } from './Text';\r\nimport computeProps from '../Utils/computeProps';\r\n\r\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\r\n\r\nclass Button extends Component {\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      borderedBtn: {\r\n        borderWidth: (this.props.bordered) ? 1 : undefined,\r\n        borderRadius: (this.props.rounded && this.props.bordered) ? variables.borderRadiusLarge : 2,\r\n      },\r\n    };\r\n  }\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().borderedBtn,\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const children = Platform.OS === 'ios'\r\n        ? this.props.children\r\n        : React.Children.map(this.props.children, child => child.type === Text ? React.cloneElement(child, { capitalize: true, ...child.props }) : child);\r\n    if (Platform.OS!=='android' || variables.androidRipple===false || Platform['Version'] <= 21) {\r\n      return (\r\n        <TouchableOpacity\r\n          {...this.prepareRootProps()}\r\n          ref={c => this._root = c}\r\n          activeOpacity={(this.props.activeOpacity) ? this.props.activeOpacity : 0.5}\r\n        >\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n    else {\r\n      return(\r\n          <TouchableNativeFeedback ref={c => this._root = c}\r\n              onPress={this.props.onPress}\r\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variables.androidRippleColor)}\r\n               {...this.prepareRootProps()}>\r\n              <View {...this.prepareRootProps()}>\r\n                  {children}\r\n              </View>\r\n          </TouchableNativeFeedback>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: React.PropTypes.object,\r\n  block: React.PropTypes.bool,\r\n  primary: React.PropTypes.bool,\r\n  transparent: React.PropTypes.bool,\r\n  success: React.PropTypes.bool,\r\n  danger: React.PropTypes.bool,\r\n  warning: React.PropTypes.bool,\r\n  info: React.PropTypes.bool,\r\n  bordered: React.PropTypes.bool,\r\n  capitalize: React.PropTypes.bool,\r\n  disabled: React.PropTypes.bool,\r\n  rounded: React.PropTypes.bool,\r\n  large: React.PropTypes.bool,\r\n  small: React.PropTypes.bool,\r\n  active: React.PropTypes.bool,\r\n};\r\n\r\nButton.defaultProps = {\r\n  capitalize: true\r\n}\r\n\r\nconst StyledButton = connectStyle('NativeBase.Button', {}, mapPropsToStyleNames)(Button);\r\nexport {\r\n  StyledButton as Button,\r\n};\r\n"]}