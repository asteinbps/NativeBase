{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","props","dataArray","renderRow","rowHasChanged","r1","r2","ds","DataSource","state","dataSource","cloneWithRows","nextProps","setState","childrenArray","Children","map","children","child","ref","_root","c","renderChildren","StyledList"],"mappings":"8yBAAA,4B;AACA;;AAEA;AACA,mE;;AAEMA,I;;AAEJ,cAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,GAAIA,MAAMC,SAAN,EAAmBD,MAAME,SAA7B,CAAwC;AACtC,GAAIC,eAAgBH,MAAMG,aAAN,EAAwB,SAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAA5C;AACA,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAAEJ,cAAeA,aAAjB,CAAxB,CAAX;AACA,MAAKK,KAAL,CAAa;AACXC,WAAYH,GAAGI,aAAH,CAAiBV,MAAMC,SAAvB,CADD,CAAb;;AAGD,CAND,IAMO;AACL,MAAKO,KAAL,CAAa,EAAb;AACD,CAVgB;AAWlB,C;AACyBG,S,CAAW;AACnC,GAAI,KAAKH,KAAL,CAAWC,UAAf,CAA2B;AACzB,KAAKG,QAAL,CAAc;AACZH,WAAY,KAAKD,KAAL,CAAWC,UAAX,CAAsBC,aAAtB,CAAoCC,UAAUV,SAA9C,CADA,CAAd;;AAGD;AACF,C;AACgB;AACf,GAAMY,eAAgB,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKf,KAAL,CAAWgB,QAA9B,CAAwC,sBAASC,MAAT,EAAxC,CAAtB;;AAEA,MAAOJ,cAAP;AACD,C;;AAEQ;AACP,GAAI,KAAKL,KAAL,CAAWC,UAAf,CAA2B;AACzB;AACE;AACM,KAAKT,KADX;AAEE,IAAK,aAACkB,IAAD,QAAS,QAAKC,KAAL,CAAaD,IAAtB,EAFP;AAGE,wBAHF;AAIE,WAAY,KAAKV,KAAL,CAAWC,UAJzB;AAKE,UAAW,KAAKT,KAAL,CAAWE,SALxB,GADF;;;AASD;AACD;AACE,0DAAM,IAAK,sBAAK,QAAKiB,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKpB,KAAzC;AACG,KAAKqB,cAAL,EADH,CADF;;;AAKD,C;;;AAGH,GAAMC,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,iCAA0DvB,IAA1D,CAAnB,C;;;AAGgBA,I,CAAduB,U","file":"List.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { ListView, View } from 'react-native';\r\n\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\r\n\r\nclass List extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.dataArray && props.renderRow) {\r\n      let rowHasChanged = props.rowHasChanged || ((r1, r2) => r1 !== r2);\r\n      const ds = new ListView.DataSource({ rowHasChanged: rowHasChanged });\r\n      this.state = {\r\n        dataSource: ds.cloneWithRows(props.dataArray)\r\n      }\r\n    } else {\r\n      this.state = {}\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.state.dataSource) {\r\n      this.setState({\r\n        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\r\n      });\r\n    }\r\n  }\r\n  renderChildren() {\r\n    const childrenArray = React.Children.map(this.props.children, child => child);\r\n\r\n    return childrenArray;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.dataSource) {\r\n      return (\r\n        <ListView\r\n          {...this.props}\r\n          ref={(ref) => this._root = ref}\r\n          enableEmptySections\r\n          dataSource={this.state.dataSource}\r\n          renderRow={this.props.renderRow}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <View ref={c => this._root = c} {...this.props} >\r\n        {this.renderChildren()}\r\n      </View>\r\n    );\r\n  }\r\n\r\n}\r\nconst StyledList = connectStyle('NativeBase.List', {}, mapPropsToStyleNames)(List);\r\n\r\nexport {\r\n  StyledList as List,\r\n};\r\n"]}