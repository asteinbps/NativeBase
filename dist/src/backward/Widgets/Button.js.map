{"version":3,"sources":["../../../../src/backward/Widgets/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","iconComponentPresent","Children","forEach","children","child","type","defaultProps","style","getInitialStyle","textStyle","OS","capitalize","toUpperCase","cloneElement","Array","isArray","newChildren","childrenArray","toArray","iconElement","remove","item","iconRight","push","iconLeft","length","c","_root","prepareRootProps","renderChildren","propTypes","PropTypes","object","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","inputButton","tabButton","StyledButton"],"mappings":"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","file":"Button.js","sourcesContent":["/* @flow */\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { TouchableOpacity, Platform } from 'react-native';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport _ from 'lodash';\r\nimport variables from '../../theme/variables/platform';\r\nimport { Icon } from './Icon';\r\nimport mapPropsToStyleNames from '../../Utils/mapPropsToStyleNames';\r\nimport computeProps from '../../Utils/computeProps';\r\nimport { Text } from './Text';\r\n\r\n\r\nclass Button extends Component {\r\n\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      borderedBtn: {\r\n        borderWidth: (this.props.bordered) ? 1 : undefined,\r\n        borderRadius: (this.props.rounded && this.props.bordered) ? variables.borderRadiusLarge : 2,\r\n      },\r\n    };\r\n  }\r\n\r\n  iconPresent() {\r\n    let iconComponentPresent = false;\r\n    React.Children.forEach(this.props.children, (child) => {\r\n      if (child.type === Icon) { iconComponentPresent = true; }\r\n    });\r\n    return iconComponentPresent;\r\n  }\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().borderedBtn,\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n\r\n  renderChildren() {\r\n    if (typeof this.props.children === 'string') {\r\n      return <Text style={this.props.textStyle}>{(Platform.OS === 'ios' || !this.props.capitalize) ? this.props.children : this.props.children.toUpperCase()}</Text>;\r\n    } else if (this.props.children.type === Icon) {\r\n      return React.cloneElement(this.props.children);\r\n    } else if (Array.isArray(this.props.children)) {\r\n      const newChildren = [];\r\n\r\n      const childrenArray = React.Children.toArray(this.props.children);\r\n\r\n      let iconElement = [];\r\n      iconElement = _.remove(childrenArray, (item) => {\r\n        if (item.type === Icon) {\r\n          return true;\r\n        }\r\n        return null;\r\n      });\r\n\r\n      if (this.props.iconRight) {\r\n        if (childrenArray[0].type === undefined) {\r\n          newChildren.push(<Text key=\"label\">{(Platform.OS === 'ios' || !this.props.capitalize) ? childrenArray[0] : childrenArray[0].toUpperCase()}</Text>);\r\n        } else {\r\n          newChildren.push(<Text key=\"label\">{(Platform.OS === 'ios' || !this.props.capitalize) ? childrenArray[0].props.children : childrenArray[0].props.children.toUpperCase()}</Text>);\r\n        }\r\n\r\n        newChildren.push(React.cloneElement(iconElement[0]));\r\n      } else if (this.props.iconLeft || iconElement.length > 0) {\r\n        newChildren.push(React.cloneElement(iconElement[0]));\r\n\r\n        if (childrenArray[0].type === undefined) {\r\n          newChildren.push(<Text key=\"label\">{(Platform.OS === 'ios' || !this.props.capitalize) ? childrenArray[0] : childrenArray[0].toUpperCase()}</Text>);\r\n        } else {\r\n          newChildren.push(<Text key=\"label\">{(Platform.OS === 'ios' || !this.props.capitalize) ? childrenArray[0].props.children : childrenArray[0].props.children.toUpperCase()}</Text>);\r\n        }\r\n      } else {\r\n        return <Text>{this.props.children}</Text>;\r\n      }\r\n\r\n      return newChildren;\r\n    }\r\n    return React.cloneElement(this.props.children);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TouchableOpacity\r\n        ref={(c) => { this._root = c; }}\r\n        {...this.prepareRootProps()} activeOpacity={0.5}\r\n      >\r\n        {this.renderChildren()}\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nButton.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: React.PropTypes.object,\r\n  textStyle: React.PropTypes.object,\r\n  block: React.PropTypes.bool,\r\n  primary: React.PropTypes.bool,\r\n  transparent: React.PropTypes.bool,\r\n  success: React.PropTypes.bool,\r\n  danger: React.PropTypes.bool,\r\n  warning: React.PropTypes.bool,\r\n  info: React.PropTypes.bool,\r\n  bordered: React.PropTypes.bool,\r\n  disabled: React.PropTypes.bool,\r\n  rounded: React.PropTypes.bool,\r\n  large: React.PropTypes.bool,\r\n  small: React.PropTypes.bool,\r\n  inputButton: React.PropTypes.bool,\r\n  tabButton: React.PropTypes.bool,\r\n};\r\n\r\n\r\nconst StyledButton = connectStyle('NativeBase.Button', {}, mapPropsToStyleNames)(Button);\r\nexport {\r\n  StyledButton as Button,\r\n};\r\n"]}